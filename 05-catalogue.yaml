- name: Install and setup Catalogue service
  become: yes  # Run all tasks as sudo/root
  hosts: catalogue  # Target is the catalogue machine

  tasks:

    # TASK 1: Disable the default Node.js module
    - name: Disable default Node.js module
      ansible.builtin.shell: dnf module disable nodejs -y

    # TASK 2: Enable Node.js 20 version
    - name: Enable Node.js 20 module
      ansible.builtin.shell: dnf module enable nodejs:20 -y

    # TASK 3: Install Node.js from enabled module
    - name: Install Node.js
      ansible.builtin.dnf:
        name: nodejs
        state: present  # Install if not already installed

    # TASK 4: Create 'roboshop' user to run the application
    - name: Add roboshop user
      ansible.builtin.user:
        name: roboshop

    # TASK 5: Create application directory /app
    - name: Create /app directory
      ansible.builtin.file:
        path: /app
        state: directory
        mode: '0755'  # Set directory permissions

    # TASK 6: Download the catalogue source code zip file
    - name: Download catalogue zip file
      ansible.builtin.get_url:
        url: https://roboshop-builds.s3.amazonaws.com/catalogue.zip
        dest: /tmp/catalogue.zip

    # TASK 7: Extract the zip file into /app
    - name: Unarchive catalogue code
      ansible.builtin.unarchive:
        src: /tmp/catalogue.zip
        dest: /app
        remote_src: no  # File is present on control node (localhost)

    # TASK 8: Run npm install inside /app to install dependencies
    - name: Run npm install in /app
      ansible.builtin.shell: npm install
      args:
        chdir: /app  # Run the command inside /app directory

    # TASK 9: Copy the systemd service file to the correct location
    - name: Copy catalogue service file
      ansible.builtin.copy:
        src: catalogue.service
        dest: /etc/systemd/system/catalogue.service
        remote_src: no

    # TASK 10: Reload systemd daemon so it picks up new service
    - name: Reload systemd daemon
      ansible.builtin.systemd_service:
        daemon_reload: true

    # TASK 11: Start and enable the catalogue service
    - name: Start and enable catalogue service
      ansible.builtin.service:
        name: catalogue
        state: started
        enabled: yes

    # TASK 12: Copy MongoDB repo file to enable MongoDB installation
    - name: Copy MongoDB repo file
      ansible.builtin.copy:
        src: mongo.repo
        dest: /etc/yum.repos.d/mongo.repo
        remote_src: no

    # TASK 13: Install MongoDB client (mongosh)
    - name: Install MongoDB client
      ansible.builtin.dnf:
        name: mongodb-mongosh
        state: present

    # TASK 14: Check if MongoDB already has product data loaded
    # - name: Check if product data already exists
    #   ansible.builtin.command: >
    #     mongo --host mongodb.kalyaneswar.site --quiet --eval
    #     'db = db.getSiblingDB("catalogue"); db.products.count()'
    #   register: product_count  # Save the output to a variable

    # TASK 15: Load data into MongoDB only if not already loaded
    - name: Load catalogue schema if products are not present
      ansible.builtin.command: mongosh --host 172.31.90.188 < /app/schema/catalogue.js
      # when: product_count.stdout == "0"  # Only run if count is 0

    # TASK 16: Restart the catalogue service to make sure it's fresh
    - name: Restart catalogue service
      ansible.builtin.service:
        name: catalogue
        state: restarted  # Restart if running, start if stopped
